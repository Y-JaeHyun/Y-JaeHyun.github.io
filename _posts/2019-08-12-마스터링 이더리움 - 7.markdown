---
layout:     post
title:      마스터링 이더리움 - 7
author:     bcnote3314
tags: 		blockchain Ethereum MasteringEthereum
subtitle:  블록체인 정복기	
category: Block
---

# 마스터링 이더리움 - 챕터 8

마스터링 이더리움 챕터 8 내용 요약.  
바이퍼는 이더리움 가상머신을 위한 실험적인 컨트랙트용 프로그래밍 언어이다.  
주 목적으로는 개발자들이 잘못 판단하기 쉬운 코드를 작성할수 없게 하는 것이다.  
(주로 솔리디티를 쓰기 때문에 바이퍼와의 비교를 통해서 조심해야할 점을 보면 될것같다.)

## 스마트 컨트랙트 취약점

- 자기파괴 컨트랙트(suicidal contract) : 아무 주소를 이용해서 삭제시킬 수 있는 스마트 컨트랙트
- 탐욕 컨트랙트(greedy contract) : 이더를 빼올수 없도록 막어버리는 상태에 도달할 수 있는 컨트랙트용
- 방탕한 컨트랙트(prodigal contract) : 이더를 아무런 주소로 보낼수 있게 만든 스마트 컨트랙트용

## 솔디리티와 바이퍼 비교

바이퍼에서 안전하지 않은 코드 작성을 방지하는 방법은 의도적으로 기능 일부를 생략한 것이다.  

- 변경자 
변경자는 보통 함수를 대신해서 사전에 권한에 대한 여부를 체크하기 위해 사용한다.  
하지만 변경자는 다른형태로도 활용이 가능하다. (어쩃든 함수기 때문에 작성하면 그대로 수행한다.)  

만약 변경자에서 특정함수를 호출하는 작업등을 통해서 상태를 변경한다면? 해당 변경자를 활용하려고 하는 경우에 오류를 유발할수 있다.  
바이퍼에서는 변경자를 모두 없애고 인라인 체크를 통하여 함수의 일부분으로 포함도록 했다.  
명시적으로 코드로 표현하도록 유도했다는 의미이다.

- 상속
상속은 기존 라이브러리에서 기능, 속성, 동작을 가져오는 것으로 미리 작성된 코드를 재활용 한다.  
객체지향의 핵심 기능이지만 다중 상속을 지원하는 경우 코드의 이해를 어렵고 복잡하게 만들수 있다.  

- 인라인 어셈블리
인라인 어셈블리는 솔리디티 프로그램이 EVM 명령어에 직접 접근하여 작업을 수행하는 것으로 이더리움 가상머신에 대한 낮은 수준의 접근을 제공한다.  
아래의 인라인 어셈블리 코드는 메모리 위치 0x80에 3을 더한다. 

> 3 0x80 mload add 0x80 mstore  

바이퍼는 가속성 손실이 아주 큰 문제라고 보기 때문에 지원하지 않는다.

- 함수 오버로딩
함수 오버로딩은 같은 이름으로 여러 함수를 작성하는 것으로 정의가 혼란스러울수 있기 때문에 함수 오버로딩을 지원하지 않는다.

- 변수 형변환
묵시적/명시적 형변환 두가지 모두 지원하지 않는다.

바이퍼에서는 명시적 형변환 대신에 convert함수를 지원한다.  
해당 함수는 예외처리에 용이한 exception을 제공하며 정보 손실이 없도록 보장할수 있다.  

- 전제 조건 / 사후 조건
바이퍼는 전제조건, 사후조건, 상태변경을 명시적으로 처리한다.  
중복코드를 생성하더라도 최대한의 가독성과 안전성을 보장하는 것을 우선한다.  

개발자는 세가지 사항을 검토해야한다.

1. 조건(condition)
이더리움 상태 변수의 현재 상태/조건은 무엇인가?
2. 효과(effect)
이 코드가 실행시 상태 변수의 조건에 어떤 영향을 미칠것인가?  
어떤 영향을 받고, 어떤 영향을 받지 않을것인가?
3. 상호작용(interaction)
다른 컨트랙트와의 상호작용을 포함하여 코드를 실행할 때 발생할 수있는 모든 결과, 효과, 시나리오에 대하여 고려해야한다.

- 장식자(decorator)
바이퍼 에서는 아래의 decorator를 함수의 시작 부분에 사용할 수 있다.
각 의미는 따로 설명할 필요는 없을듯.
1. @private 
2. @public
3. @constant
4. @payable

- 함수와 변수 순서
바이퍼의 스마트 컨트랙트는 하나의 바이퍼 파일로 구성된다.  
즉, 모든 함수, 변수 등을 포함하여 모든 바이퍼 스마트 컨트랙트가 한곳에 존재한다. 바이퍼는 각 스마트 컨트랙트의 함수 및 변수 선언을 물리적 순서에 맞게 작성해아한다. (솔리디티는 전혀 그런 제약이 없다. C와 비슷한 느낌이다.)

- 오버플로 방지
바이퍼는 컴파일러에서 오버플로 방지를 지원한다.  

바이퍼는 유연성보다 정확성에 중점을 둔 언어이다.
