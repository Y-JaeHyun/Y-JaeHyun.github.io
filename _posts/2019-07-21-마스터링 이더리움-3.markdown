---
layout:     post
title:      마스터링 이더리움 - 3
author:     bcnote3314
tags: 		blockchain Ethereum MasteringEthereum
subtitle:  블록체인 정복기	
category: Block
---

# 마스터링 이더리움 - 챕터 3

마스터링 이더리움 챕터 3에 관련된 내용 정리  
이더리움의 클라이언트에 대한 내용

## 이더리움 클라이언트 

이더리움은 오픈 소스 프로젝트이며 누구나 무료로 자유롭게 사용할수 있다. (ex. 카카오의 klaytn이 이더리움 비잔티움 버전에서 포크된 것이라고 했었다.)  

또한 이더리움의 공식 사양은 **황서** 에 이미 정의되어있다.  
해당 사양에 맞추어 클라이언트를 구현하여 표준 통신 프로토콜을 준수한다면, P2P방식으로 대부분 통신이 가능하며 **상호운용(interoperate)**이 가능하다.  

물론 황서에 정의된 사양과 동일하더라도 각 클라이언트마다 조금씩 변경한 부분이 존재하여 상호운용되지 않을 수도 있긴 하다.

이더리움은 이미 여러가지 언어로 작성된 구현체가 존재한다.

- 러스트(Rust)로 작성된 패리티(parity)
- 고(Go)로 작성된 게스(Geth)
- C++로 작성된 cpp-ethereum
- 파이썬(Python)으로 작성된 pyethereum
- 스칼라(Scala)로 작성된 멘티스(mentis)
- 자바(Java)로 작서된 하모니(Harmony)

## 풀노드

블록체인의 건전성, 복원력, 검열 저항에 대한 특성은 독립적으로 운용되고 지리적으로 분산된 풀노드가 얼마나 많은지에 달려있다.  

각각의 풀 노드가 트랜젹선과 컨트랙트에 대한 신뢰할 수 있고 독립적은 검증을 제공할 수 있도록 도와주어야 한다. (이것도 이전 블록체인 살펴보기에서 나왔던 내용이다. 블록체인이라는 기술 특성상 노드가 유입이 되기전인 초반이 가장 위험한 기간이라고 한 이유가 증명을 도와줄 노드가 부족하기 때문이였다.)
하지만 풀 노드를 사용하는 것은 하드웨어 자원, 대역폭 등 다양한 비용이 발생한다.

단순히 이더리움으로 DApp을 개발한다고 풀노드가 필요로 하지는 않다.  
테스트넷을 이용하거나 가나슈(Ganache) 라고 하는 로컬 사설 블록체인이나 인퓨라(Infura)같은 서비스를 제공받아 개발을 할 수 있다.

또는 원격 클라이언트를 통할 수도 있다. 원격 클라이언트는 지갑의 기능을 제공하며 트랜잭션을 생성하고 전파 할 수 있다.  
메타 마스크와 같은 지갑들이 원격 클라이언트로 사용될수 있다. 

> 가나슈 (Ganache)
> 가나슈는 개발목적으로 메모리상에 올려서 테스트용으로 사용하는 것이다. 실행시 100개의 이더가 들어있는 10개의 계정이 제공되며 이를가지고 다양한 테스트를 해볼수 있다.

> 인퓨라 (Infura)
> 쉽게 말하면 노드를 제공해주는 서비스이다. DApp에서 풀노드를 실행하지 않아도 이더리움 네트워크에서 정보처리를 할수 있도록 지원한다.
> 다만 이것은 또다른 중앙화를 만드는 문제점이기도 하다. 이미 메타마스크와 같은 wallet에서도 인퓨라에 의존하는데 만약 인퓨라 서비스 공급에 문제가 생기게 되면 모든 DApp이 영향을 받게 된다.

## JSON-RPC 인터페이스

이더리움 클라이언트는 어플리케이션 인터페이스와 JSON으로 인코딩된 RPC(Remote Procedure Call) 명령을 제공한다.  
JSON-RPC API를 참고하여 명령을 볼 수 있다.  

# 챕터 4

암호학에 관련된 설명이다. 블록체인 살펴보기에서 다룬 내용과 중복이기 때문에 넘어간다.
다만 내용이 없기 때문에 이장에 초반에 잠깐 나온 단어인 영지식 증명 (이더리움연구회 ot때 들어본 단어라 흥미가 생김..)에 대한 내용과 이더리움에서 확장성을 위하여 어떤 연구를 하는지 대체해서 포스팅한다.

## 영 지식 증명(zero knowledge proof)

누군가가 상대방에게 어떤 사항이 참이라는 것을 증명할 때, 그 문장의 참 거짓 여부를 제외한 어떤것도 노출되지 않는 상호 작용 절차를 의미한다.

[영지식 증명 위키](https://ko.wikipedia.org/wiki/%EC%98%81%EC%A7%80%EC%8B%9D_%EC%A6%9D%EB%AA%85)

이더리움의 고질적인 문제인 확장성을 해결해줄 것으로 기대되는 솔루션이다.
모든 트랜잭션이 블록체인에 기록되지 않아도 존재를 증명할 수 있다면?!

그 외에도 금융업계나 그외의 버블릭 블록체인을 꺼리는(?) 업체들의 참여를 유도할수도 있을것이다.  
어떤것도 노출되지 않는다는 점은 버블릭 블록체인과 프라이빗 블록체인(공부 해봐야지..)의 틈을 좁힐수 있다.  
상황에 따라선 버블릭이 브라이빗을 완천히 포함할수도 있지 않을까?

또한 블록체인 내에서 암호화가 되는 것이기 때문에 다양한 방면으로 활용이 가능할것 같다.

이를 구현한 것은 대표적으로 zk-snarks 가 있다.

[zk-snarks](http://wiki.hash.kr/index.php/%EC%98%81%EC%A7%80%EC%8B%9D_%EC%8A%A4%EB%82%98%ED%81%AC)

## 플라즈마

모든 거래 내역을 메인 체인 내에서 처리하는 것이 아닌 하위의 차일드체인에서 수집된 정보들을 처리한 후 결과만 메인체인에 전달하는 방식으로 처리속도를 향상 시킨 알고리즘이다. 

## 동형 암호화(homomorphic encryption)

동형암호화는 암호호된 데이터를 가지고 연산을 진행하는 것을 의미한다.

a라는 데이터와 b라는 데이터의 공개 없이 두개의 합한 값을 전달하고 싶다고 가정하고 a의 암호화 결과가 A, b의 암호화 결과가 B라고 가정했을때  
A+B=C이며 C의 복호호환 데이터가 a+b의 합한 값인 c와 동일하다면 동형 암호화 성질을 만족한다고 볼수 있다.



